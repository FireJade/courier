@(map: org.coursera.courier.generator.twirl.defs.MapDefinition)
@import java.util.Calendar
@import com.linkedin.data.schema.SchemaToJsonEncoder
@import com.linkedin.data.schema.JsonBuilder
@import org.coursera.courier.generator.twirl.defs._

@@Generated(value = Array("@(map.scalaType)"), comments="Courier Data Template.", date = "@(Calendar.getInstance().getTime())")
final class @(map.scalaType)(private val dataMap: DataMap)
  extends immutable.Iterable[(String, @(map.valueClass.scalaType))]
  with Map[String, @(map.valueClass.scalaType)]
  with immutable.MapLike[String, @(map.valueClass.scalaType), immutable.Map[String, @(map.valueClass.scalaType)]]
  with DataTemplate[DataMap] {
  import @(map.scalaType)._

  // TODO(jbetz): Decide on caching policy for data template types. We should not be creating a
  // new instance here on each lookup.
  private[this] def lookup(key: String): Option[@(map.valueClass.scalaType)] = {
    @map.valueClass match {
      case recordItem: RecordDefinition => {
        Option(dataMap.getDataMap(key)).map(dataMap => @(map.valueClass.scalaType)(dataMap, DataConversion.SetReadOnly))
      }
      case primitiveItem: PrimitiveDefinition => {
        Option(dataMap.get(key).asInstanceOf[@(primitiveItem.dataType)])
      }
      case enumItem: EnumDefinition => {
        Option(dataMap.get(key).asInstanceOf[String]).map(@(enumItem.enumName).fromString)
      }
      case _: Any => { ??? }
    }
    @* TODO: add array values *@
    @* TODO: add map values *@
    @* TODO: add union values *@
    @* TODO: add custom type values *@
  }

  override def get(key: String): Option[@(map.valueClass.scalaType)] = lookup(key)

  override def iterator: Iterator[(String, @(map.valueClass.scalaType))] = new Iterator[(String, @(map.valueClass.scalaType))] {
    val underlying = dataMap.keySet().iterator()
    override def hasNext: Boolean = underlying.hasNext
    override def next(): (String, @(map.valueClass.scalaType)) = {
      val key = underlying.next()
      key -> lookup(key).get
    }
  }

  override def +[F >: @(map.valueClass.scalaType)](kv: (String, F)): Map[String, F] = {
    val (key, value) = kv
    value match {
      case v: @(map.valueClass.scalaType) =>
        val copy = dataMap.copy()
        copy.put(key, coerceOutput(v))
        copy.setReadOnly()
        new @(map.scalaType)(copy)
      case _: Any =>
        (iterator ++ Iterator.single(kv)).toMap
    }
  }

  override def -(key: String): @(map.scalaType) = {
    val copy = dataMap.copy()
    copy.remove(key)
    copy.setReadOnly()
    new @(map.scalaType)(copy)
  }

  override def schema(): DataSchema = @(map.scalaType).SCHEMA

  override def data(): DataMap = dataMap

  override def copy(): DataTemplate[DataMap] = {
    val copy = dataMap.copy()
    copy.setReadOnly()
    new @(map.scalaType)(copy)
  }
}

object @(map.scalaType) {
  val SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(map.schema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[MapDataSchema]

  val empty = @(map.scalaType)()

  def apply(elems: (String, @(map.valueClass.scalaType))*): @(map.scalaType) = {
    @(map.scalaType)(elems.toMap)
  }

  def apply(map: Map[String, @(map.valueClass.scalaType)]): @(map.scalaType) = {
    new @(map.scalaType)(new DataMap(map.mapValues(coerceOutput).asJava))
  }

  def apply(dataMap: DataMap, conversion: DataConversion): @(map.scalaType) = {
    new @(map.scalaType)(DataTemplates.makeImmutable(dataMap, SCHEMA, conversion))
  }

  def newBuilder = new DataBuilder()

  implicit val canBuildFrom = new CanBuildFrom[@(map.scalaType), (String, @(map.valueClass.scalaType)), @(map.scalaType)] {
    def apply(from: @(map.scalaType)) = new DataBuilder(from)
    def apply() = newBuilder
  }

  class DataBuilder(initial: @(map.scalaType)) extends mutable.Builder[(String, @(map.valueClass.scalaType)), @(map.scalaType)] {
    def this() = this(new @(map.scalaType)(new DataMap()))

    val entries = new DataMap(initial.data())

    def +=(kv: (String, @(map.valueClass.scalaType))): this.type = {
      val (key, value) = kv
      entries.put(key, coerceOutput(value))
      this
    }

    def clear() = {
      entries.clear()
    }

    def result() = {
      entries.setReadOnly()
      new @(map.scalaType)(entries)
    }
  }

  private def coerceOutput(value: @(map.valueClass.scalaType)): AnyRef = {
    @map.valueClass match {
      case recordItem: RecordDefinition => {
        value.data()
      }
      case primitiveItem: PrimitiveDefinition => {
        @primitiveItem.maybeBox{value}
      }
      case enumItem: EnumDefinition => {
        value.toString
      }
      case _: Any => { ??? }
    }
    @* TODO: add array values *@
    @* TODO: add map values *@
    @* TODO: add union values *@
    @* TODO: add custom type values *@
  }
}
