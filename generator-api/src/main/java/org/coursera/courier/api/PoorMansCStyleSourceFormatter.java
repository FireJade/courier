/*
 * Copyright 2015 Coursera Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.coursera.courier.api;

import org.apache.commons.lang3.StringUtils;

/**
 * Cleans up C-Style source code generated by a string template engine.
 *
 * Ideally, we would use a grammar aware formatter for each language we need to format.
 * Unfortunately, they we have been unable to find good formatters for Java and Swift.
 *
 * Until we find something we can use for this languages, we'll use these basic heuristics:
 *
 * - To sanitize whitespace, collapse consecutive empty lines to a single empty line.
 * - To keep documentation and annotations directly above class and field definitions, collapse any
 *   empty lines after a line starting with '*' or '@'.
 * - Auto-indent '{', '}' delimited code blocks correctly so long as '{' is always the last and '}'
 *   is always the first non-whitespace char on a line.
 * - Removes any tailing whitespace from the ends of lines.
 * - Treat all lines starting with a '*' as a continuation of a documentation comment and indents them
 *   one additional space.
 *
 * This routine only modifies whitespace that is either on an empty line or that precedes or trails
 * the code on any particular line. The code from the fist non-whitespace character to the last on
 * each line of code is left unmodified.
 *
 */
public class PoorMansCStyleSourceFormatter {
  public static String format(String code) {
    String lines[] = code.split("\\r?\\n");
    StringBuilder result = new StringBuilder();

    int indentLevel = 0;
    boolean isPreviousLineEmpty = true;
    boolean isPreviousLinePreamble = false;

    for (String line: lines) {
      line = line.trim();

      boolean isEmpty = (line.length() == 0);
      if (isEmpty && (isPreviousLineEmpty || isPreviousLinePreamble)) continue;

      if (line.startsWith("}") || line.startsWith("]")) {
        indentLevel--;
      }
      result.append(StringUtils.repeat("  ", indentLevel));
      if (line.startsWith("*")) {
        result.append(" "); // align javadoc continuation
      }
      result.append(line);
      result.append('\n');

      if (line.endsWith("{") || line.endsWith("[")) {
        indentLevel++;
      }

      isPreviousLinePreamble = (line.startsWith("@") || line.startsWith("*"));
      isPreviousLineEmpty = isEmpty;
    }
    return result.toString();
  }
}
