sbt_fortune:
  pdsc_source: |
    schemas/src/main/pegasus/org/example/fortune/Fortune.pdsc:

    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "message", "type": "string" }
      ]
    }
  courier_source: |
    schemas/src/main/pegasus/org/example/fortune/Fortune.courier:

    namespace org.example.fortune

    record Fortune {
      message: string
    }

record_example:
  pdsc_source: |
    {
      "name": "Example",
      "namespace": "org.example",
      "doc": "A simple record.",
      "type": "record",
      "fields": [
        { "name": "field1", "type": "string" },
        { "name": "field2", "type": "int", "optional": true }
      ]
    }
  courier_source: |
    namespace org.example

    record Example {
      field1: string
      field2: int?
    }

array_example:
  pdsc_source: |
    { "type": "array", "items": "org.example.Fortune" }
  courier_source: |
    array[org.example.Fortune]

array_in_record:
  pdsc_source: |
    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "arrayField", "type": { "type": "array", "items": "int" } }
      ]
    }
  courier_source: |
    namespace org.example.fortune

    record Fortune {
      arrayField: array[int]
    }

map_explicit_key:
  pdsc_source: |
    { "type": "map", "keys": "int", "values": "org.example.Fortune" }
  courier_source: |
    map[int, org.example.Fortune]

map_implicit_key:
  pdsc_source: |
    { "type": "map", "values": "org.example.Note" }
  courier_source: |
    map[string, org.example.Note]

map_in_record:
  pdsc_source: |
    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "mapField", "type": { "type": "map", "values": "int" } }
      ]
    }
  courier_source: |
    namespace org.example.fortune

    record Fortune {
      mapField: map[string, int]
    }

union_structure:
  pdsc_source: |
    [ "&lt;MemberType1&gt;", "&lt;MemberType2&gt;" ]
  courier_source: |
    union[&lt;MemberType1>, &lt;MemberType2&gt;]

union_example:
  pdsc_source: |
    [ "int", "string", "org.example.Fortune" ]
  courier_source: |
    union[int, string, org.example.Fortune]

union_in_record:
  pdsc_source: |
    {
      "name": "Question",
      "namespace": "org.example",
      "type": "record",
      "fields": [
        { "name": "answerFormat", "type": [ "MultipleChoice", "TextEntry" ] }
      ]
    }
  courier_source: |
    namespace org.example

    record Question {
      answerFormat: union[MultipleChoice, TextEntry]
    }

enum_example:
  pdsc_source: |
    {
      "type" : "enum",
      "name" : "Fruits",
      "namespace" : "org.example",
      "symbols" : ["APPLE", "BANANA", "ORANGE"]
    }
  courier_source: |
    namespace org.example

    enum Fruits {
      APPLE
      BANANA
      ORANGE
    }

enum_in_record:
  pdsc_source: |
    {
      "type": "record",
      "name": "FruitBasket",
      "namespace": "org.example",
      "fields": [
        { "name": "fruit", "type": "org.example.Fruits" }
      ]
    }
  courier_source: |
    namespace org.example

    record FruitBasket {
      fruit: org.example.Fruits
    }

enum_inline:
  pdsc_source: |
    {
      "type": "record",
      "name": "FruitBasket",
      "namespace": "org.example",
      "fields": [
        {
          "name": "fruit",
          "type": {
            "type": "enum",
            "name": "Fruits",
            "symbols": ["APPLE", "BANANA", "ORANGE"]
          }
        }
      ]
    }
  courier_source: |
    record FruitBasket {
      fruit: enum Fruits { APPLE, BANANA, ORANGE }
    }

typeref_example:
  pdsc_source: |
    {
      "name": "AnswerTypes",
      "namespace": "org.example",
      "type": "typeref",
      "ref": ["MutlipleChoice", "TextEntry"]
    }
  courier_source: |
    namespace org.example

    typeref AnswerTypes = union[MultipleChoice, TextEntry]

typeref_in_record:
  pdsc_source: |
    {
      "type": "record",
      "name": "Question",
      "namespace": "org.example",
      "fields": [
        { "name": "answerFormat", "type": "org.example.AnswerTypes" }
      ]
    }
  courier_source: |
    namespace org.example

    record Question {
      answerFormat: org.example.AnswerTypes
    }

typeref_for_timestamp:
  pdsc_source: |
    {
      "name": "UnixTimestamp",
      "namespace": "org.example",
      "type": "typeref",
      "ref": "long"
    }
  courier_source: |
    namespace org.example

    typeref UnixTimestamp = long

custom_type_single_element:
  pdsc_source: |
    {
      "name": "SlugId",
      "namespace": "org.example.schemas",
      "type": "typeref",
      "ref": "string",
      "scala": {
        "class": "org.example.SlugId"
      }
    }
  courier_source: |
    namespace org.example.schemas

    @scala({"class": "org.example.SlugId"})
    typeref SlugId = string

custom_type_coercer:
  pdsc_source: |
    {
      "name": "DateTime",
      "namespace": "org.example",
      "type": "typeref",
      "ref": "string",
      "doc": "ISO 8601 date-time.",
      "scala": {
        "class": "org.joda.time.DateTime",
        "coercerClass": "org.coursera.models.common.DateTimeCoercer"
      }
    }
  courier_source: |
    namespace org.example

    @scala({
      "class": "org.joda.time.DateTime",
      "coercerClass": "org.coursera.models.common.DateTimeCoercer"
    })
    typeref DateTime = string

custom_type_in_record:
  pdsc_source: |
    {
      "type": "record",
      "name": "Fortune",
      "namespace": "org.example",
      "fields": [
        { "name": "createdAt", "type": "org.example.DateTime" }
      ]
    }
  courier_source: |
    namespace org.example

    record Fortune {
      createdAt: org.example.DateTime
    }
