sbt_fortune:
  courier: |
    ```
    namespace org.example.fortune

    record Fortune {
      message: string
    }
    ```
  pdsc: |
    ```json
    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "message", "type": "string" }
      ]
    }
    ```

record_example:
  courier: |
    ```
    namespace org.example

    import org.example.time.DateTime

    record Example {
      field1: string
      field2: int?
      field3: DateTime
    }
    ```
  pdsc: |
    ```json
    {
      "name": "Example",
      "namespace": "org.example",
      "doc": "A simple record.",
      "type": "record",
      "fields": [
        { "name": "field1", "type": "string" },
        { "name": "field2", "type": "int", "optional": true },
        { "name": "field3", "type": "org.example.time.DateTime" }
      ]
    }
    ```

record_include_example:
  courier: |
    ```
    record WithIncluded {
      ...AnotherRecord
    }
    ```
  pdsc: |
    ```json
    {
      "name" : "WithIncluded",
      "type" : "record",
      "include" : [ "AnotherRecord" ],
      "fields" : []
    }
    ```

array_example:
  courier: |
    ```
    array[org.example.Fortune]
    ```
  pdsc: |
    ```json
    { "type": "array", "items": "org.example.Fortune" }
    ```

array_in_record:
  courier: |
    ```
    namespace org.example.fortune

    record Fortune {
      arrayField: array[int]
    }
    ```
  pdsc: |
    ```json
    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "arrayField", "type": { "type": "array", "items": "int" } }
      ]
    }
    ```

map_explicit_key:
  courier: |
    ```
    map[int, org.example.Fortune]
    ```
  pdsc: |
    ```json
    { "type": "map", "keys": "int", "values": "org.example.Fortune" }
    ```

map_implicit_key:
  courier: |
    ```
    map[string, org.example.Note]
    ```
  pdsc: |
    ```json
    { "type": "map", "values": "org.example.Note" }
    ```

map_in_record:
  courier: |
    ```
    namespace org.example.fortune

    record Fortune {
      mapField: map[string, int]
    }
    ```
  pdsc: |
    ```json
    {
      "name": "Fortune",
      "namespace": "org.example.fortune",
      "type": "record",
      "fields": [
        { "name": "mapField", "type": { "type": "map", "values": "int" } }
      ]
    }
    ```

union_structure:
  courier: |
    ```
    union[MemberType1, MemberType2]
    ```
  pdsc: |
    ```json
    [ "MemberType1", "MemberType2" ]
    ```

union_example:
  courier: |
    ```
    union[int, string, org.example.Fortune]
    ```
  pdsc: |
    ```json
    [ "int", "string", "org.example.Fortune" ]
    ```

union_in_record:
  courier: |
    ```
    namespace org.example

    record Question {
      answerFormat: union[MultipleChoice, TextEntry]
    }
    ```
  pdsc: |
    ```json
    {
      "name": "Question",
      "namespace": "org.example",
      "type": "record",
      "fields": [
        { "name": "answerFormat", "type": [ "MultipleChoice", "TextEntry" ] }
      ]
    }
    ```

enum_example:
  courier: |
    ```
    namespace org.example

    enum Fruits {
      APPLE
      BANANA
      ORANGE
    }
    ```
  pdsc: |
    ```json
    {
      "type" : "enum",
      "name" : "Fruits",
      "namespace" : "org.example",
      "symbols" : ["APPLE", "BANANA", "ORANGE"]
    }
    ```

enum_in_record:
  courier: |
    ```
    namespace org.example

    record FruitBasket {
      fruit: org.example.Fruits
    }
    ```
  pdsc: |
    ```json
    {
      "type": "record",
      "name": "FruitBasket",
      "namespace": "org.example",
      "fields": [
        { "name": "fruit", "type": "org.example.Fruits" }
      ]
    }
    ```

enum_inline:
  courier: |
    ```
    namespace org.example

    record FruitBasket {
      fruit: enum Fruits { APPLE, BANANA, ORANGE }
    }
    ```
  pdsc: |
    ```json
    {
      "type": "record",
      "name": "FruitBasket",
      "namespace": "org.example",
      "fields": [
        {
          "name": "fruit",
          "type": {
            "type": "enum",
            "name": "Fruits",
            "symbols": ["APPLE", "BANANA", "ORANGE"]
          }
        }
      ]
    }
    ```

enum_properties_example:
  courier: |
    ```
    namespace org.example

    enum Fruits {
      @color = "red"
      APPLE

      /** Yum. */
      @color = "yellow"
      BANANA

      @deprecated
      @color = "orange"
      ORANGE
    }
    ```

  pdsc: |
    ```json
    {
      "type" : "enum",
      "name" : "Fruits",
      "namespace" : "org.example",
      "symbols" : ["APPLE", "BANANA", "ORANGE"],
      "symbolDocs": {
        "BANANA": "Yum."
      },
      "deprecatedSymbols": {
        "ORANGE": true
      },
      "symbolProperties": {
        "APPLE": "red",
        "BANANA": "yellow",
        "ORANGE": "orange"
      }
    }
    ```

typeref_example:
  courier: |
    ```
    namespace org.example

    typeref AnswerTypes = union[MultipleChoice, TextEntry]
    ```
  pdsc: |
    ```json
    {
      "name": "AnswerTypes",
      "namespace": "org.example",
      "type": "typeref",
      "ref": ["MutlipleChoice", "TextEntry"]
    }
    ```

typeref_in_record:
  courier: |
    ```
    namespace org.example

    record Question {
      answerFormat: org.example.AnswerTypes
    }
    ```
  pdsc: |
    ```json
    {
      "type": "record",
      "name": "Question",
      "namespace": "org.example",
      "fields": [
        { "name": "answerFormat", "type": "org.example.AnswerTypes" }
      ]
    }
    ```

typeref_for_timestamp:
  courier: |
    ```
    namespace org.example

    typeref UnixTimestamp = long
    ```
  pdsc: |
    ```json
    {
      "name": "UnixTimestamp",
      "namespace": "org.example",
      "type": "typeref",
      "ref": "long"
    }
    ```

custom_type_single_element:
  courier: |
    ```
    namespace org.example.schemas

    @scala.class = "org.example.SlugId"
    typeref SlugId = string
    ```
  pdsc: |
    ```json
    {
      "name": "SlugId",
      "namespace": "org.example.schemas",
      "type": "typeref",
      "ref": "string",
      "scala": {
        "class": "org.example.SlugId"
      }
    }
    ```

custom_type_coercer:
  courier: |
    ```
    namespace org.example

    @scala.class = "org.joda.time.DateTime"
    @scala.coercerClass = "org.coursera.models.common.DateTimeCoercer"
    typeref DateTime = string
    ```
  pdsc: |
    ```json
    {
      "name": "DateTime",
      "namespace": "org.example",
      "type": "typeref",
      "ref": "string",
      "doc": "ISO 8601 date-time.",
      "scala": {
        "class": "org.joda.time.DateTime",
        "coercerClass": "org.coursera.models.common.DateTimeCoercer"
      }
    }
    ```

custom_type_in_record:
  courier: |
    ```
    namespace org.example

    record Fortune {
      createdAt: org.example.DateTime
    }
    ```
  pdsc: |
    ```json
    {
      "type": "record",
      "name": "Fortune",
      "namespace": "org.example",
      "fields": [
        { "name": "createdAt", "type": "org.example.DateTime" }
      ]
    }
    ```

record_fields:
  courier: |
    Schema Field                                 | Generated Scala
    ---------------------------------------------|------------------------------------------------------
    `field: string`                              | `case class Record(field: String)`
    `field: string = "message"`                  | `case class Record(field: String = "message")`
    `field: string?`                             | `case class Record(field: Option[String] = None)`
  pdsc: |
    Schema Field                                 | Generated Scala
    ---------------------------------------------|------------------------------------------------------
    `"type": "string"`                           | `case class Record(field: String)`
    `..., "default": "message"`                  | `case class Record(field: String = "message")`
    `..., "optional": true`                      | `case class Record(field: Option[String] = None)`

docstring:
  courier:
    /**
     * Doc strings may be added to types. This doc should describe the purposes
     * of the Example type.
     *
     * Doc strings may be formatted using
     * [Markdown](https://daringfireball.net/projects/markdown/).
     */
    record Example {
      /**
       * Doc strings may also be added to fields.
       */
       field: string
    }
  pdsc:
    {
      "name": "Example",
      "type": "record",
      "doc": "Doc strings may be added to types...",
      "fields": [
        {
          "name": "field",
          "type": "string",
          "doc": "Doc strings may also be added to fields."
        }
      ]
    }

deprecated:
  courier:
    @deprecated("Use record X instead.")
    record Example {
      @deprecated("Use field x instead.")
      field: string
    }
  pdsc:
    {
      "name": "Example",
      "type": "record",
      "deprecated": "Use record X instead.",
      "fields": [
        {
          "name": "field",
          "type": "string",
          "doc": "Use field x instead."
        }
      ]
    }

record_properties:
  courier: |
    Schema Field                                 | Generated Scala
    ---------------------------------------------|------------------------------------------------------
    `/** A documented field" */`                 | `case class Record(/** A documented field */ field: String)`
    `@deprecated("Use field X instead")`         | `case class Record(@deprecated(message = "Use field X instead") field: String)`
  pdsc: |
    Schema Field                                 | Generated Scala
    ---------------------------------------------|------------------------------------------------------
    `..., "doc": "A documented field"`           | `case class Record(/** A documented field */ field: String)`
    `..., "deprecated": "Use field X instead"`   | `case class Record(@deprecated(message = "Use field X instead") field: String)`

array_examples:
  courier: |
    Schema type                                         | Scala type
    ----------------------------------------------------|--------------------------------------------------
    `array[int]`                                        | `org.coursera.courier.data.IntArray` (predefined)
    `array[org.example.Record]`                         | `org.example.RecordArray` (generated)
  pdsc: |
    Schema type                                         | Scala type
    ----------------------------------------------------|--------------------------------------------------
    `{ "type": "array", "items": "int" }`               | `org.coursera.courier.data.IntArray` (predefined)
    `{ "type": "array", "items": "org.example.Record" }`| `org.example.RecordArray` (generated)

map_examples:
  courier: |
    Schema type                                                                        | Scala type
    -----------------------------------------------------------------------------------|------------------------------------------------
    `map[string, int]`                                                                 | `org.coursera.courier.data.IntMap` (predefined)
    `map[string, org.example.Record`                                                   | `org.example.RecordMap` (generated)
    `map[org.example.SimpleId, org.example.Record]`                                    | `org.example.SimpleIdToRecordMap` (generated)
  pdsc: |
    Schema type                                                                        | Scala type
    -----------------------------------------------------------------------------------|------------------------------------------------
    `{ "type": "map", "values": "int" }`                                               | `org.coursera.courier.data.IntMap` (predefined)
    `{ "type": "map", "values": "org.example.Record" }`                                | `org.example.RecordMap` (generated)
    `{ "type": "map", "keys": "org.example.SimpleId", "values": "org.example.Record" }`| `org.example.SimpleIdToRecordMap` (generated)

validation_example_typeref:
  courier: |
    ```
    @validate.regex = {
      "regex": "^(What|Who) is"
    }
    typeref JeopardyAnswer = string
    ```

  pdsc: |
    ```json
    {
      "type" : "typeref",
      "name" : "JeopardyAnswer",
      "ref"  : "string",
      "validate" : {
        "regex" : {
          "regex" : "^(What|Who) is"
        }
      }
    }
    ```

validation_example_field:
  courier: |
    ```
    record JeopardyResponse {
      @validate.regex = {
        "regex": "^(What|Who) is"
      }
      question: string
    }
    ```

  pdsc: |
    ```json
    {
      "name" : "JeopardyResponse",
      "type" : "record",
      "fields": [
        "name": "question",
        "type": "string",
        "validate" : {
          "regex" : {
            "regex" : "^(What|Who) is"
          }
        }
      ]
    }
    ```

validation_custom_example:
  courier: |
    ```
    @validate = {
      "org.example.CustomValidator" = {
        "customValidatorProperty" : "..."
      }
    }
    typeref ExampleTyperef = string
    ```

  pdsc: |
    ```json
    {
      "type" : "typeref",
      "name" : "ExampleTyperef",
      "ref"  : "string",
      "validate" : {
        "org.example.CustomValidator" : {
          "customValidatorProperty" : "..."
        }
      }
    }
    ```
